version: "3.9"
services:
  nginx:
    container_name: nginx
    image: nginx:latest
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - front
      - back
    networks:
      - my_network

  front:
    container_name: front
    restart: always
    build:
      context: ./front
      dockerfile: Dockerfile
#    ports:
#      - "127.0.0.1:3000:3000"
    volumes:
      - ./front:/app
      - /app/node_modules
    command: npm start
    depends_on:
      - back
    environment:
      - NODE_ENV=development
    networks:
      - my_network

  back:
    container_name: back
    restart: always
    build:
      context: ./back
      dockerfile: Dockerfile
#    ports:
#      - "127.0.0.1:8000:8000"
    command: ["./wait-for-postgres.sh", "postgres", "./app"]
    environment:
      APP_ADDR: back:8000
      APP_TIMEOUT: 30s
      APP_LOG_LEVEL: info
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      POSTGRES_SSL: disable
      POSTGRES_DEBUG: "false"
      POSTGRES_MAX_IDLE: 1
      POSTGRES_MAX_OPEN: 1
    depends_on:
      - postgres
    networks:
      my_network:
        aliases:
          - back

#  wait-for-postgres.sh:
#    image: busybox
#    container_name: wait-for-postgres.sh
#    command: ["/bin/sh", "-c", "until pg_isready; do sleep 1; done"]
#    networks:
#      - my_network

  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - my_network

volumes:
  postgres_data:
    
networks:
  my_network:
    driver: bridge
